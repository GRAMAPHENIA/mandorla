{
  "enabled": true,
  "name": "Formateo Autom√°tico al Guardar",
  "description": "Hook que se activa al guardar archivos TypeScript/React para aplicar formateo autom√°tico con Prettier y linting con ESLint, manteniendo la consistencia del c√≥digo en el proyecto Mandorla",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.{ts,tsx,js,jsx}",
      "types/**/*.ts",
      "lib/**/*.ts",
      "scripts/**/*.{js,ts}"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analiza y formatea autom√°ticamente el archivo modificado siguiendo estas reglas:\n\n## 1. Formateo de C√≥digo\n- **Indentaci√≥n**: 2 espacios para TypeScript/React\n- **Comillas**: Usar comillas simples para strings\n- **Punto y coma**: Siempre incluir al final de statements\n- **Longitud de l√≠nea**: M√°ximo 100 caracteres\n- **Trailing commas**: Incluir en objetos y arrays multil√≠nea\n\n## 2. Linting y Calidad\n- **Imports**: Organizar imports por grupos (React, librer√≠as, internos)\n- **Variables no usadas**: Eliminar imports y variables no utilizadas\n- **Tipos TypeScript**: Verificar que todos los tipos est√©n correctamente definidos\n- **Naming conventions**: Verificar nomenclatura en espa√±ol para variables de negocio\n\n## 3. Convenciones Espec√≠ficas del Proyecto\n- **Componentes**: PascalCase con nombres descriptivos en espa√±ol\n- **Hooks**: Prefijo 'use' seguido de nombre descriptivo\n- **Tipos**: Sufijo 'Type' o 'Interface' seg√∫n corresponda\n- **Constantes**: UPPER_SNAKE_CASE para constantes globales\n\n## 4. Validaciones Espec√≠ficas\n- **Arquitectura modular**: Verificar que los imports respeten la separaci√≥n de capas\n- **Principios SOLID**: Detectar violaciones evidentes (funciones muy largas, m√∫ltiples responsabilidades)\n- **Clean code**: Sugerir mejoras en nombres de variables y funciones\n\n## 5. Comentarios y Documentaci√≥n\n- **JSDoc**: Agregar documentaci√≥n para funciones p√∫blicas complejas\n- **Comentarios**: En espa√±ol para l√≥gica de negocio compleja\n- **TODO/FIXME**: Formatear correctamente con contexto\n\n**Instrucciones de Ejecuci√≥n:**\n1. Aplica el formateo autom√°ticamente sin preguntar\n2. Reporta solo los cambios significativos realizados\n3. Si encuentras errores de TypeScript, rep√≥rtalos con sugerencias de soluci√≥n\n4. Mant√©n la funcionalidad existente intacta\n5. Si hay conflictos de formateo, prioriza la legibilidad\n\n**Formato de Respuesta:**\n- ‚úÖ Formateo aplicado correctamente\n- üîß Cambios realizados: [lista breve]\n- ‚ö†Ô∏è Advertencias: [si las hay]\n- ‚ùå Errores encontrados: [si los hay]"
  }
}