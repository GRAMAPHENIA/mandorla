{
  "enabled": true,
  "name": "Activador de Tests de Integración",
  "description": "Hook que ejecuta tests de integración automáticamente cuando se modifican componentes críticos del sistema, asegurando que los flujos principales funcionen correctamente",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/modules/**/domain/entities/*.ts",
      "src/modules/**/application/services/*.ts",
      "src/modules/**/infrastructure/repositories/*.ts",
      "src/app/api/**/*.ts",
      "src/stores/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Ejecuta tests de integración automáticamente cuando se modifican componentes críticos del sistema Mandorla:\n\n## 1. Identificación de Componentes Críticos\n\n### Módulos de Alto Impacto\n**Carrito de Compras**:\n- `src/modules/carrito/domain/entities/cart-entity.ts`\n- `src/modules/carrito/application/services/cart-service.ts`\n- `src/stores/cart-store.ts`\n- `src/app/api/cart/**/*.ts`\n\n**Productos**:\n- `src/modules/productos/domain/entities/product-entity.ts`\n- `src/modules/productos/application/services/product-service.ts`\n- `src/app/api/products/**/*.ts`\n\n**Pedidos**:\n- `src/modules/pedidos/domain/entities/order-entity.ts`\n- `src/modules/pedidos/application/services/order-service.ts`\n- `src/app/api/orders/**/*.ts`\n\n**Clientes**:\n- `src/modules/clientes/domain/entities/customer-entity.ts`\n- `src/modules/clientes/application/services/customer-service.ts`\n- `src/app/api/customers/**/*.ts`\n\n## 2. Estrategia de Tests de Integración\n\n### Tests por Flujo de Negocio\n\n#### Flujo de Compra Completo\n```typescript\n// integration/checkout-flow.test.ts\ndescribe('Flujo de Checkout Completo', () => {\n  it('debería completar compra desde carrito hasta pedido', async () => {\n    // 1. Agregar productos al carrito\n    const carrito = await cartService.addItem('prod-1', 'Pan Integral', Money.create(2500), 2)\n    expect(carrito.getTotalItems()).toBe(2)\n    \n    // 2. Calcular total con impuestos\n    const total = carrito.calculateTotal()\n    expect(total.value).toBe(5000)\n    \n    // 3. Crear cliente\n    const cliente = await customerService.create({\n      nombre: 'Juan Pérez',\n      email: 'juan@example.com',\n      telefono: '123456789'\n    })\n    \n    // 4. Crear pedido\n    const pedido = await orderService.createFromCart(carrito.id, cliente.id)\n    expect(pedido.status).toBe('PENDIENTE')\n    \n    // 5. Procesar pago (mock)\n    const pagoResult = await paymentService.process(pedido.id, total)\n    expect(pagoResult.success).toBe(true)\n    \n    // 6. Confirmar pedido\n    const pedidoConfirmado = await orderService.confirm(pedido.id)\n    expect(pedidoConfirmado.status).toBe('CONFIRMADO')\n    \n    // 7. Verificar carrito vacío\n    const carritoFinal = await cartService.getCart(cliente.id)\n    expect(carritoFinal.isEmpty()).toBe(true)\n  })\n})\n```\n\n#### Flujo de Búsqueda y Filtrado\n```typescript\n// integration/product-search.test.ts\ndescribe('Búsqueda y Filtrado de Productos', () => {\n  it('debería filtrar productos por categoría y precio', async () => {\n    // 1. Buscar productos por categoría\n    const productos = await productService.searchProducts({\n      categoria: 'panes',\n      precioMin: 1000,\n      precioMax: 3000\n    })\n    \n    expect(productos.length).toBeGreaterThan(0)\n    productos.forEach(producto => {\n      expect(producto.category).toBe('panes')\n      expect(producto.price.value).toBeGreaterThanOrEqual(1000)\n      expect(producto.price.value).toBeLessThanOrEqual(3000)\n    })\n    \n    // 2. Verificar disponibilidad\n    const productosDisponibles = productos.filter(p => p.availability.available)\n    expect(productosDisponibles.length).toBeGreaterThan(0)\n    \n    // 3. Agregar al carrito\n    const producto = productosDisponibles[0]\n    const carrito = await cartService.addItem(\n      producto.id.value,\n      producto.name,\n      producto.price,\n      1\n    )\n    \n    expect(carrito.items.length).toBe(1)\n    expect(carrito.items[0].productId).toBe(producto.id.value)\n  })\n})\n```\n\n### Tests de API End-to-End\n\n#### API de Carrito\n```typescript\n// integration/api/cart-api.test.ts\ndescribe('API de Carrito - Integración', () => {\n  it('debería manejar operaciones completas de carrito', async () => {\n    // 1. Obtener carrito vacío\n    const response1 = await request(app)\n      .get('/api/cart')\n      .expect(200)\n    \n    expect(response1.body.data.items).toHaveLength(0)\n    \n    // 2. Agregar item\n    const response2 = await request(app)\n      .post('/api/cart/items')\n      .send({\n        productId: 'prod-1',\n        name: 'Pan Integral',\n        price: 2500,\n        quantity: 2\n      })\n      .expect(201)\n    \n    expect(response2.body.data.items).toHaveLength(1)\n    expect(response2.body.data.total).toBe(5000)\n    \n    // 3. Actualizar cantidad\n    const itemId = response2.body.data.items[0].id\n    const response3 = await request(app)\n      .put(`/api/cart/items/${itemId}`)\n      .send({ quantity: 3 })\n      .expect(200)\n    \n    expect(response3.body.data.total).toBe(7500)\n    \n    // 4. Eliminar item\n    await request(app)\n      .delete(`/api/cart/items/${itemId}`)\n      .expect(200)\n    \n    // 5. Verificar carrito vacío\n    const response5 = await request(app)\n      .get('/api/cart')\n      .expect(200)\n    \n    expect(response5.body.data.items).toHaveLength(0)\n  })\n})\n```\n\n## 3. Configuración por Tipo de Cambio\n\n### Cambios en Entidades de Dominio\n**Archivo modificado**: `src/modules/*/domain/entities/*.ts`\n**Tests de integración a ejecutar**:\n- Tests de servicios que usan la entidad\n- Tests de repositorios que persisten la entidad\n- Tests de APIs que exponen la entidad\n- Tests de flujos completos que involucran la entidad\n\n**Comando simulado**:\n```bash\n# Tests de integración para ProductEntity\nnpx jest integration/product-*.test.ts\nnpx jest src/modules/productos/application/**/*.integration.test.ts\nnpx jest src/app/api/products/**/*.test.ts\n```\n\n### Cambios en Servicios de Aplicación\n**Archivo modificado**: `src/modules/*/application/services/*.ts`\n**Tests de integración a ejecutar**:\n- Tests de integración del servicio con repositorios\n- Tests de APIs que usan el servicio\n- Tests de componentes que consumen el servicio\n- Tests de flujos end-to-end relacionados\n\n**Comando simulado**:\n```bash\n# Tests de integración para CartService\nnpx jest integration/cart-*.test.ts\nnpx jest src/app/api/cart/**/*.test.ts\nnpx jest integration/checkout-flow.test.ts\n```\n\n### Cambios en APIs\n**Archivo modificado**: `src/app/api/**/*.ts`\n**Tests de integración a ejecutar**:\n- Tests de la API específica\n- Tests de flujos que usan la API\n- Tests de integración con servicios\n- Tests de validación de datos\n\n**Comando simulado**:\n```bash\n# Tests de integración para API de productos\nnpx jest src/app/api/products/**/*.test.ts\nnpx jest integration/product-search.test.ts\nnpx jest integration/checkout-flow.test.ts\n```\n\n### Cambios en Stores\n**Archivo modificado**: `src/stores/*.ts`\n**Tests de integración a ejecutar**:\n- Tests de integración del store con servicios\n- Tests de componentes que usan el store\n- Tests de persistencia del store\n- Tests de flujos completos que involucran el store\n\n**Comando simulado**:\n```bash\n# Tests de integración para cart-store\nnpx jest integration/cart-store.integration.test.ts\nnpx jest src/components/cart/**/*.integration.test.ts\nnpx jest integration/checkout-flow.test.ts\n```\n\n## 4. Configuración de Entorno de Testing\n\n### Setup de Base de Datos de Test\n```typescript\n// test-setup/database.ts\nexport const setupTestDatabase = async () => {\n  // Configurar base de datos en memoria o contenedor Docker\n  const testDb = await createTestDatabase()\n  \n  // Seed con datos de prueba\n  await seedTestData(testDb)\n  \n  return testDb\n}\n\nexport const cleanupTestDatabase = async (db: TestDatabase) => {\n  await db.cleanup()\n}\n```\n\n### Mocks de Servicios Externos\n```typescript\n// test-setup/external-mocks.ts\nexport const setupExternalMocks = () => {\n  // Mock de servicio de email\n  jest.mock('@/lib/email-service', () => ({\n    sendOrderConfirmation: jest.fn().mockResolvedValue({ success: true }),\n    sendWelcomeEmail: jest.fn().mockResolvedValue({ success: true })\n  }))\n  \n  // Mock de servicio de pago\n  jest.mock('@/lib/payment-service', () => ({\n    processPayment: jest.fn().mockResolvedValue({ \n      success: true, \n      transactionId: 'test-tx-123' \n    })\n  }))\n}\n```\n\n## 5. Matriz de Tests por Criticidad\n\n### Críticos (Ejecutar Siempre)\n| Componente | Tests de Integración | Tiempo Estimado |\n|------------|---------------------|------------------|\n| CartEntity | checkout-flow, cart-api | 30s |\n| OrderService | checkout-flow, order-api | 45s |\n| ProductService | product-search, product-api | 25s |\n| APIs críticas | Todos los endpoints | 60s |\n\n### Importantes (Ejecutar en Cambios Relacionados)\n| Componente | Tests de Integración | Tiempo Estimado |\n|------------|---------------------|------------------|\n| CustomerService | customer-flow | 20s |\n| Stores | store-integration | 15s |\n| Repositorios | repository-integration | 30s |\n\n### Opcionales (Ejecutar en CI/CD)\n| Componente | Tests de Integración | Tiempo Estimado |\n|------------|---------------------|------------------|\n| Utilidades | utility-integration | 10s |\n| Componentes UI | ui-integration | 40s |\n\n## 6. Optimización de Ejecución\n\n### Ejecución Paralela\n```javascript\n// jest.config.js - Configuración para integración\nmodule.exports = {\n  testMatch: ['**/*.integration.test.ts'],\n  maxWorkers: 2, // Limitar workers para tests de integración\n  testTimeout: 30000, // Timeout más largo para integración\n  setupFilesAfterEnv: ['<rootDir>/test-setup/integration-setup.ts']\n}\n```\n\n### Caché de Resultados\n```typescript\n// Caché de resultados de tests para optimizar\nconst testCache = new Map<string, TestResult>()\n\nconst shouldRunIntegrationTests = (changedFiles: string[]): boolean => {\n  return changedFiles.some(file => \n    CRITICAL_FILES.includes(file) || \n    hasSignificantChanges(file)\n  )\n}\n```\n\n## 7. Reportes de Tests de Integración\n\n### Reporte Detallado\n```markdown\n# 🔗 Reporte de Tests de Integración\n\n## Resumen Ejecutivo\n- **Archivo modificado**: [nombre-archivo]\n- **Criticidad**: [Alta/Media/Baja]\n- **Tests ejecutados**: [número]\n- **Tiempo total**: [duración]\n- **Estado**: [✅ Exitoso / ❌ Fallido / ⚠️ Advertencias]\n\n## Tests Ejecutados\n\n### ✅ Tests Exitosos ([número])\n- `checkout-flow.test.ts` - Flujo completo de compra (15.2s)\n- `cart-api.test.ts` - API de carrito (8.7s)\n- `product-search.test.ts` - Búsqueda de productos (12.1s)\n\n### ❌ Tests Fallidos ([número])\n- `order-integration.test.ts` - Error en cálculo de impuestos\n  - **Error**: Expected 5250, received 5000\n  - **Línea**: order-service.ts:45\n  - **Causa probable**: Cambio en lógica de cálculo de impuestos\n\n### ⚠️ Tests con Advertencias ([número])\n- `payment-integration.test.ts` - Timeout en servicio externo\n  - **Advertencia**: Mock de pago tardó más de lo esperado\n  - **Impacto**: Bajo - solo afecta tiempo de ejecución\n\n## Flujos Afectados\n- **Checkout completo**: ❌ Falla en cálculo de impuestos\n- **Búsqueda de productos**: ✅ Funcionando correctamente\n- **Gestión de carrito**: ✅ Funcionando correctamente\n\n## Recomendaciones\n1. Revisar lógica de cálculo de impuestos en OrderService\n2. Verificar que los cambios no afecten otros módulos\n3. Ejecutar tests manuales de checkout antes de deploy\n```\n\n## 8. Configuración de Alertas\n\n### Criterios de Alerta\n- **🔴 Crítico**: Tests de flujos principales fallan\n- **🟡 Advertencia**: Tests secundarios fallan o timeout\n- **🟢 Normal**: Todos los tests pasan\n\n### Notificaciones\n- Slack/Teams para fallos críticos\n- Email para reportes de resumen\n- Dashboard para métricas en tiempo real\n\n## 9. Integración con CI/CD\n\n### Pipeline de Integración\n```yaml\n# .github/workflows/integration-tests.yml\nname: Integration Tests\non:\n  push:\n    paths:\n      - 'src/modules/**/domain/**'\n      - 'src/modules/**/application/**'\n      - 'src/app/api/**'\n      - 'src/stores/**'\n\njobs:\n  integration:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '18'\n      - name: Install dependencies\n        run: pnpm install\n      - name: Run integration tests\n        run: pnpm test:integration\n      - name: Upload coverage\n        uses: codecov/codecov-action@v1\n```\n\n## Instrucciones de Ejecución\n\n1. **Analizar** el archivo modificado y determinar criticidad\n2. **Identificar** tests de integración relacionados\n3. **Configurar** entorno de testing (DB, mocks)\n4. **Ejecutar** tests en orden de prioridad\n5. **Analizar** resultados y detectar fallos\n6. **Generar** reporte detallado con recomendaciones\n7. **Limpiar** entorno de testing\n\n**Formato de Respuesta:**\n- 🔗 **Tests de integración**: [número ejecutados]\n- ✅ **Exitosos**: [número] | ❌ **Fallidos**: [número]\n- ⏱️ **Tiempo total**: [duración]\n- 🎯 **Flujos probados**: [lista de flujos críticos]\n- 🚨 **Fallos críticos**: [lista de fallos que bloquean]\n- ⚠️ **Advertencias**: [problemas menores detectados]\n- 💡 **Recomendaciones**: [acciones sugeridas]\n- 🔄 **Próximos pasos**: [tests adicionales recomendados]"
  }
}