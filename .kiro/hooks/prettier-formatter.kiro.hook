{
  "enabled": true,
  "name": "Formateador Prettier Autom√°tico",
  "description": "Hook que aplica formateo Prettier consistente al guardar archivos, manteniendo un estilo de c√≥digo uniforme en todo el proyecto Mandorla",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.{ts,tsx,js,jsx,json,md}",
      "types/**/*.ts",
      "lib/**/*.ts",
      "*.{json,md,yml,yaml}"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Aplica formateo Prettier autom√°tico al archivo modificado siguiendo la configuraci√≥n est√°ndar del proyecto:\n\n## Configuraci√≥n Prettier para Mandorla\n\n### 1. Configuraci√≥n Base\n```json\n{\n  \"semi\": true,\n  \"trailingComma\": \"es5\",\n  \"singleQuote\": true,\n  \"printWidth\": 100,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"bracketSpacing\": true,\n  \"bracketSameLine\": false,\n  \"arrowParens\": \"avoid\",\n  \"endOfLine\": \"lf\"\n}\n```\n\n### 2. Reglas Espec√≠ficas por Tipo de Archivo\n\n**TypeScript/JavaScript (.ts, .tsx, .js, .jsx):**\n- Punto y coma: Siempre incluir\n- Comillas: Simples para strings, dobles para JSX props\n- Indentaci√≥n: 2 espacios\n- Longitud m√°xima: 100 caracteres\n- Trailing commas: En objetos y arrays multil√≠nea\n\n**JSON (.json):**\n- Indentaci√≥n: 2 espacios\n- Sin trailing commas\n- Comillas dobles obligatorias\n\n**Markdown (.md):**\n- Longitud de l√≠nea: 100 caracteres\n- Preservar saltos de l√≠nea en listas\n\n### 3. Formateo de Estructuras Espec√≠ficas\n\n**Objetos y Arrays:**\n```typescript\n// ‚úÖ Correcto\nconst producto = {\n  id: 1,\n  nombre: 'Pan Integral',\n  precio: 2500,\n  disponible: true,\n};\n\n// ‚úÖ Array multil√≠nea\nconst categorias = [\n  'galletas',\n  'pasteles',\n  'panes',\n  'temporada',\n];\n```\n\n**Funciones y Componentes:**\n```typescript\n// ‚úÖ Funci√≥n con par√°metros m√∫ltiples\nconst calcularPrecioTotal = (\n  productos: Producto[],\n  descuento: number,\n  impuestos: number\n): number => {\n  // l√≥gica aqu√≠\n};\n\n// ‚úÖ Componente React\nconst ListaProductos: React.FC<ListaProductosProps> = ({\n  productos,\n  onSeleccionar,\n  mostrarPrecios = true,\n}) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {/* contenido */}\n    </div>\n  );\n};\n```\n\n**Imports:**\n```typescript\n// ‚úÖ Organizaci√≥n de imports\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\n\nimport { Button } from '@/components/ui/button';\nimport { ProductoCard } from '@/components/productos/ProductoCard';\n\nimport { useProductos } from '@/hooks/useProductos';\nimport { formatearPrecio } from '@/lib/utils';\n\nimport type { Producto } from '@/types/product';\n```\n\n### 4. Casos Especiales\n\n**JSX/TSX:**\n- Props en l√≠neas separadas si exceden 100 caracteres\n- Cierre de tags en l√≠nea separada para elementos multil√≠nea\n- Espacios en llaves de expresiones: `{ valor }`\n\n**Tailwind CSS:**\n- Mantener clases en una l√≠nea si es posible\n- Separar en m√∫ltiples l√≠neas si excede 100 caracteres\n\n### 5. Validaciones Adicionales\n\n**Consistencia:**\n- Verificar que todo el archivo siga el mismo estilo\n- Detectar inconsistencias en indentaci√≥n\n- Validar uso correcto de comillas\n\n**Calidad:**\n- Eliminar espacios en blanco innecesarios\n- Normalizar saltos de l√≠nea\n- Verificar encoding UTF-8\n\n**Instrucciones de Ejecuci√≥n:**\n1. Aplica el formateo Prettier autom√°ticamente\n2. Respeta la configuraci√≥n definida arriba\n3. Mant√©n la funcionalidad del c√≥digo intacta\n4. Reporta solo cambios significativos\n5. Si hay conflictos, prioriza legibilidad\n\n**Formato de Respuesta:**\n- ‚úÖ **Formateo completado**: Archivo formateado correctamente\n- üîß **Cambios aplicados**: [lista breve de cambios de formato]\n- ‚ö†Ô∏è **Advertencias**: [si hay problemas de formato complejos]\n- üìè **M√©tricas**: [l√≠neas afectadas, caracteres por l√≠nea promedio]"
  }
}