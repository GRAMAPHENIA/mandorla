{
  "enabled": true,
  "name": "Integraci√≥n ESLint Autom√°tica",
  "description": "Hook que ejecuta ESLint autom√°ticamente al guardar archivos para detectar y corregir problemas de c√≥digo, manteniendo la calidad del proyecto Mandorla",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.{ts,tsx,js,jsx}",
      "types/**/*.ts",
      "lib/**/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Ejecuta una validaci√≥n ESLint autom√°tica en el archivo modificado y aplica las correcciones necesarias:\n\n## 1. Validaciones ESLint Principales\n- **Sintaxis**: Verificar errores de sintaxis TypeScript/JavaScript\n- **Imports**: Validar imports no utilizados y organizaci√≥n\n- **Variables**: Detectar variables declaradas pero no usadas\n- **Tipos**: Verificar consistencia de tipos TypeScript\n- **React Hooks**: Validar reglas de hooks (dependencies, orden)\n\n## 2. Reglas Espec√≠ficas del Proyecto\n- **Next.js**: Validar uso correcto de componentes Next.js\n- **React**: Verificar patrones de React (keys, props, state)\n- **TypeScript**: Asegurar tipado estricto\n- **Imports**: Verificar rutas relativas vs absolutas\n\n## 3. Correcciones Autom√°ticas\n**Aplicar autom√°ticamente:**\n- Eliminar imports no utilizados\n- Agregar punto y coma faltante\n- Corregir indentaci√≥n inconsistente\n- Organizar imports por grupos\n- Agregar tipos faltantes obvios\n\n**Reportar para revisi√≥n manual:**\n- Errores de l√≥gica de negocio\n- Problemas de rendimiento potenciales\n- Violaciones de principios SOLID\n- Dependencias de hooks incorrectas\n\n## 4. Validaciones Espec√≠ficas de Arquitectura\n- **Separaci√≥n de capas**: Verificar que imports respeten arquitectura hexagonal\n- **M√≥dulos**: Validar que no haya dependencias circulares\n- **Componentes**: Verificar que componentes UI no importen l√≥gica de negocio\n\n## 5. Reglas de Calidad de C√≥digo\n- **Complejidad ciclom√°tica**: Detectar funciones muy complejas\n- **Longitud de funciones**: Identificar funciones muy largas\n- **Duplicaci√≥n**: Detectar c√≥digo duplicado obvio\n- **Nomenclatura**: Verificar nombres descriptivos\n\n## 6. Integraci√≥n con Herramientas del Proyecto\n- **Jest**: Validar imports de testing utilities\n- **Zustand**: Verificar patrones correctos de stores\n- **React Hook Form**: Validar uso correcto de formularios\n- **Zod**: Verificar esquemas de validaci√≥n\n\n**Comandos a Simular:**\n```bash\n# Ejecutar ESLint con auto-fix\nnpx eslint [archivo] --fix\n\n# Verificar tipos TypeScript\nnpx tsc --noEmit\n```\n\n**Instrucciones de Ejecuci√≥n:**\n1. Analiza el archivo como si ejecutaras ESLint\n2. Aplica correcciones autom√°ticas seguras\n3. Reporta errores que requieren atenci√≥n manual\n4. Proporciona sugerencias espec√≠ficas de mejora\n5. Mant√©n la funcionalidad existente\n\n**Formato de Respuesta:**\n- üîß **Correcciones aplicadas**: [lista de fixes autom√°ticos]\n- ‚ö†Ô∏è **Advertencias**: [problemas menores detectados]\n- ‚ùå **Errores cr√≠ticos**: [problemas que requieren atenci√≥n]\n- üí° **Sugerencias**: [mejoras recomendadas]\n- ‚úÖ **Estado**: [archivo limpio/requiere revisi√≥n]"
  }
}