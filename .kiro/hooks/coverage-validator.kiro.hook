{
  "enabled": true,
  "name": "Validador de Cobertura de C√≥digo",
  "description": "Hook que valida que los cambios de c√≥digo mantengan o mejoren la cobertura m√≠nima establecida, asegurando calidad en el testing",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.{ts,tsx}",
      "types/**/*.ts",
      "lib/**/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Valida la cobertura de c√≥digo despu√©s de modificaciones, asegurando que se mantengan los umbrales m√≠nimos establecidos:\n\n## 1. Configuraci√≥n de Umbrales de Cobertura\n\n### Umbrales Globales del Proyecto Mandorla\n```javascript\ncoverageThreshold: {\n  global: {\n    branches: 70,\n    functions: 70,\n    lines: 70,\n    statements: 70\n  }\n}\n```\n\n### Umbrales Espec√≠ficos por M√≥dulo\n```javascript\n// M√≥dulos de dominio (m√°s estrictos)\n'src/modules/**/domain/**': {\n  branches: 85,\n  functions: 85,\n  lines: 85,\n  statements: 85\n},\n\n// Servicios de aplicaci√≥n\n'src/modules/**/application/**': {\n  branches: 80,\n  functions: 80,\n  lines: 80,\n  statements: 80\n},\n\n// Componentes React\n'src/components/**': {\n  branches: 75,\n  functions: 75,\n  lines: 75,\n  statements: 75\n},\n\n// Hooks personalizados\n'src/hooks/**': {\n  branches: 80,\n  functions: 80,\n  lines: 80,\n  statements: 80\n},\n\n// Stores de Zustand\n'src/stores/**': {\n  branches: 85,\n  functions: 85,\n  lines: 85,\n  statements: 85\n}\n```\n\n## 2. An√°lisis de Cobertura por Tipo de Archivo\n\n### Entidades de Dominio\n**Archivo**: `src/modules/*/domain/entities/*.ts`\n**Validaciones espec√≠ficas**:\n- Todos los m√©todos p√∫blicos deben estar cubiertos\n- Validaciones de negocio deben tener tests\n- Casos edge y errores deben estar probados\n- Value objects relacionados deben estar cubiertos\n\n**Comando de an√°lisis**:\n```bash\nnpx jest --coverage --collectCoverageOnlyFrom=\"src/modules/productos/domain/entities/product-entity.ts\"\n```\n\n### Servicios de Aplicaci√≥n\n**Archivo**: `src/modules/*/application/services/*.ts`\n**Validaciones espec√≠ficas**:\n- Casos de uso principales cubiertos\n- Manejo de errores probado\n- Integraci√≥n con repositorios mockeada\n- Validaciones de entrada cubiertas\n\n**Comando de an√°lisis**:\n```bash\nnpx jest --coverage --collectCoverageOnlyFrom=\"src/modules/carrito/application/services/cart-service.ts\"\n```\n\n### Componentes React\n**Archivo**: `src/components/**/*.tsx`\n**Validaciones espec√≠ficas**:\n- Renderizado b√°sico cubierto\n- Props requeridas y opcionales probadas\n- Eventos de usuario simulados\n- Estados de carga y error cubiertos\n\n**Comando de an√°lisis**:\n```bash\nnpx jest --coverage --collectCoverageOnlyFrom=\"src/components/products/product-card.tsx\"\n```\n\n### Hooks Personalizados\n**Archivo**: `src/hooks/*.ts`\n**Validaciones espec√≠ficas**:\n- Todos los valores de retorno cubiertos\n- Efectos secundarios probados\n- Cleanup functions cubiertas\n- Estados de loading/error probados\n\n### Stores de Zustand\n**Archivo**: `src/stores/*.ts`\n**Validaciones espec√≠ficas**:\n- Todas las acciones cubiertas\n- Estados iniciales probados\n- Persistencia (si aplica) cubierta\n- Selectores complejos probados\n\n## 3. An√°lisis de Cobertura Diferencial\n\n### Comparaci√≥n Antes/Despu√©s\n**M√©tricas a comparar**:\n- L√≠neas cubiertas vs no cubiertas\n- Ramas (branches) cubiertas\n- Funciones probadas\n- Statements ejecutados\n\n### Reporte de Cambios\n```markdown\n## üìä An√°lisis de Cobertura\n\n### Archivo Modificado: [nombre-archivo]\n\n#### Cobertura Actual\n- **L√≠neas**: [actual]% (umbral: [umbral]%) [‚úÖ/‚ùå]\n- **Ramas**: [actual]% (umbral: [umbral]%) [‚úÖ/‚ùå]\n- **Funciones**: [actual]% (umbral: [umbral]%) [‚úÖ/‚ùå]\n- **Statements**: [actual]% (umbral: [umbral]%) [‚úÖ/‚ùå]\n\n#### Cambios Respecto a Versi√≥n Anterior\n- **L√≠neas**: [anterior]% ‚Üí [actual]% ([+/-][diferencia]%)\n- **Ramas**: [anterior]% ‚Üí [actual]% ([+/-][diferencia]%)\n- **Funciones**: [anterior]% ‚Üí [actual]% ([+/-][diferencia]%)\n- **Statements**: [anterior]% ‚Üí [actual]% ([+/-][diferencia]%)\n\n#### Estado General: [‚úÖ APROBADO / ‚ùå RECHAZADO / ‚ö†Ô∏è ADVERTENCIA]\n```\n\n## 4. Detecci√≥n de C√≥digo No Cubierto\n\n### An√°lisis de L√≠neas Sin Cobertura\n**Identificar**:\n- L√≠neas espec√≠ficas sin tests\n- Ramas condicionales no probadas\n- Funciones sin llamar en tests\n- Casos edge no cubiertos\n\n### Sugerencias de Mejora\n```typescript\n// ‚ùå C√≥digo sin cobertura detectado\nif (cantidad <= 0) {\n  throw new InvalidQuantityError(cantidad) // L√≠nea 45 - Sin cobertura\n}\n\n// ‚úÖ Test sugerido\nit('deber√≠a lanzar error con cantidad inv√°lida', () => {\n  expect(() => {\n    carrito.addItem('prod-1', 'Producto', Money.create(100), -1)\n  }).toThrow(InvalidQuantityError)\n})\n```\n\n## 5. Validaci√≥n por Criticidad\n\n### C√≥digo Cr√≠tico (Cobertura Obligatoria 90%+)\n- C√°lculos de precios y totales\n- Validaciones de datos de entrada\n- L√≥gica de negocio principal\n- Manejo de errores cr√≠ticos\n\n### C√≥digo Importante (Cobertura Recomendada 80%+)\n- Componentes de UI principales\n- Servicios de aplicaci√≥n\n- Hooks personalizados\n- Utilidades compartidas\n\n### C√≥digo Auxiliar (Cobertura M√≠nima 70%+)\n- Componentes de layout\n- Utilidades de formateo\n- Configuraciones\n- Tipos y interfaces\n\n## 6. Integraci√≥n con Herramientas de Cobertura\n\n### Configuraci√≥n de Jest\n```javascript\n// jest.config.js - Configuraci√≥n optimizada\nmodule.exports = {\n  collectCoverage: true,\n  collectCoverageFrom: [\n    'src/**/*.{ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/**/*.stories.{ts,tsx}',\n    '!src/**/index.{ts,tsx}',\n  ],\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html', 'json-summary'],\n  coverageThreshold: {\n    // Configuraci√≥n espec√≠fica del proyecto\n  }\n}\n```\n\n### Comandos de An√°lisis\n```bash\n# Cobertura completa\nnpx jest --coverage\n\n# Cobertura de archivo espec√≠fico\nnpx jest --coverage --collectCoverageOnlyFrom=\"[archivo]\"\n\n# Cobertura con umbral espec√≠fico\nnpx jest --coverage --coverageThreshold='{\"global\":{\"lines\":80}}'\n\n# Reporte en formato JSON para an√°lisis\nnpx jest --coverage --coverageReporters=json-summary\n```\n\n## 7. Reportes y Visualizaci√≥n\n\n### Reporte Detallado\n```markdown\n# üìã Reporte de Cobertura de C√≥digo\n\n## Resumen Ejecutivo\n- **Estado General**: [‚úÖ Aprobado / ‚ùå Rechazado]\n- **Cobertura Global**: [porcentaje]%\n- **Archivos Analizados**: [n√∫mero]\n- **Umbrales Cumplidos**: [n√∫mero]/[total]\n\n## Detalles por Archivo\n\n### ‚úÖ Archivos que Cumplen Umbrales\n| Archivo | L√≠neas | Ramas | Funciones | Statements |\n|---------|--------|-------|-----------|------------|\n| file1.ts | 85% | 80% | 90% | 85% |\n\n### ‚ùå Archivos que NO Cumplen Umbrales\n| Archivo | L√≠neas | Ramas | Funciones | Statements | Faltante |\n|---------|--------|-------|-----------|------------|----------|\n| file2.ts | 65% | 60% | 70% | 65% | 15% l√≠neas |\n\n## L√≠neas Sin Cobertura\n\n### [archivo].ts\n- **L√≠nea 45**: Validaci√≥n de error no probada\n- **L√≠neas 67-72**: Rama condicional sin tests\n- **L√≠nea 89**: Funci√≥n privada sin cobertura indirecta\n\n## Recomendaciones\n1. Agregar tests para validaciones de error\n2. Cubrir ramas condicionales faltantes\n3. Probar casos edge identificados\n4. Mejorar tests de integraci√≥n\n```\n\n### Dashboard de Cobertura\n```json\n{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"overall\": {\n    \"lines\": { \"covered\": 1250, \"total\": 1500, \"percentage\": 83.33 },\n    \"branches\": { \"covered\": 180, \"total\": 220, \"percentage\": 81.82 },\n    \"functions\": { \"covered\": 95, \"total\": 110, \"percentage\": 86.36 },\n    \"statements\": { \"covered\": 1200, \"total\": 1450, \"percentage\": 82.76 }\n  },\n  \"files\": [\n    {\n      \"path\": \"src/modules/productos/domain/entities/product-entity.ts\",\n      \"coverage\": { \"lines\": 90, \"branches\": 85, \"functions\": 95, \"statements\": 88 },\n      \"status\": \"passed\",\n      \"threshold\": { \"lines\": 85, \"branches\": 85, \"functions\": 85, \"statements\": 85 }\n    }\n  ]\n}\n```\n\n## 8. Acciones Correctivas\n\n### Cuando la Cobertura Baja del Umbral\n**Acciones autom√°ticas**:\n1. Bloquear commit si est√° configurado\n2. Generar reporte detallado de l√≠neas faltantes\n3. Sugerir tests espec√≠ficos a agregar\n4. Proporcionar plantillas de tests\n\n### Sugerencias de Tests\n```typescript\n// Para entidades de dominio\ndescribe('ProductEntity', () => {\n  it('deber√≠a calcular precio con descuento', () => {\n    // Test sugerido para l√≠nea sin cobertura\n  })\n  \n  it('deber√≠a validar disponibilidad', () => {\n    // Test para rama condicional\n  })\n})\n\n// Para componentes React\ndescribe('ProductCard', () => {\n  it('deber√≠a mostrar estado de carga', () => {\n    // Test para estado no cubierto\n  })\n})\n```\n\n## 9. Configuraci√≥n de Alertas\n\n### Umbrales de Alerta\n- **üî¥ Cr√≠tico**: Cobertura < 60% (bloquear)\n- **üü° Advertencia**: Cobertura 60-75% (alertar)\n- **üü¢ Bueno**: Cobertura > 75% (aprobar)\n\n### Notificaciones\n- Degradaci√≥n > 5% en cobertura\n- Archivos cr√≠ticos sin cobertura m√≠nima\n- Nuevas l√≠neas sin tests\n\n## Instrucciones de Ejecuci√≥n\n\n1. **Ejecutar** an√°lisis de cobertura en archivos modificados\n2. **Comparar** con umbrales establecidos por tipo de archivo\n3. **Identificar** l√≠neas, ramas y funciones sin cobertura\n4. **Generar** reporte detallado con sugerencias\n5. **Validar** si cumple criterios de aprobaci√≥n\n6. **Proporcionar** acciones correctivas espec√≠ficas\n\n**Formato de Respuesta:**\n- üìä **Cobertura actual**: [porcentaje] ([cambio] desde √∫ltima versi√≥n)\n- ‚úÖ **Umbrales cumplidos**: [n√∫mero]/[total]\n- ‚ùå **Umbrales fallidos**: [lista de archivos]\n- üîç **L√≠neas sin cobertura**: [n√∫mero] l√≠neas identificadas\n- üìù **Tests sugeridos**: [n√∫mero] tests recomendados\n- üö® **Estado**: [APROBADO/RECHAZADO/ADVERTENCIA]\n- üí° **Pr√≥ximos pasos**: [acciones espec√≠ficas recomendadas]"
  }
}