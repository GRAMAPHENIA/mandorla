{
  "enabled": true,
  "name": "Actualizador de Diagramas de Arquitectura",
  "description": "Hook que actualiza automáticamente los diagramas de arquitectura cuando se modifican módulos, servicios o componentes, manteniendo la documentación visual sincronizada",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/modules/**/domain/**/*.ts",
      "src/modules/**/application/**/*.ts",
      "src/modules/**/infrastructure/**/*.ts",
      "src/modules/**/presentation/**/*.tsx",
      "src/app/api/**/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Actualiza automáticamente los diagramas de arquitectura basándose en los cambios realizados en el módulo o componente:\n\n## 1. Análisis de Cambios Arquitectónicos\n\n**Detectar modificaciones en:**\n- Nuevas entidades de dominio\n- Servicios de aplicación agregados/modificados\n- Repositorios e interfaces de infraestructura\n- Componentes de presentación\n- APIs y endpoints\n- Dependencias entre módulos\n\n**Identificar impacto:**\n- Cambios en flujos de datos\n- Nuevas relaciones entre módulos\n- Modificaciones en patrones de arquitectura\n- Actualizaciones en interfaces públicas\n\n## 2. Diagramas a Actualizar\n\n### Diagrama de Arquitectura General\n```mermaid\ngraph TB\n    subgraph \"Capa de Presentación\"\n        UI[Componentes UI]\n        Pages[Páginas Next.js]\n        Layouts[Layouts]\n    end\n    \n    subgraph \"Capa de Aplicación\"\n        Products[Módulo Productos]\n        Cart[Módulo Carrito]\n        Orders[Módulo Pedidos]\n        Customers[Módulo Clientes]\n    end\n    \n    subgraph \"Capa de Infraestructura\"\n        API[API Routes]\n        Storage[Almacenamiento]\n        External[APIs Externas]\n    end\n    \n    UI --> Products\n    UI --> Cart\n    Products --> API\n    Cart --> Storage\n```\n\n### Diagrama de Módulo Específico (Arquitectura Hexagonal)\n```mermaid\ngraph LR\n    subgraph \"[NombreModulo]\"\n        subgraph \"Domain\"\n            E[Entidades]\n            VO[Value Objects]\n            DE[Domain Events]\n        end\n        \n        subgraph \"Application\"\n            UC[Use Cases]\n            S[Services]\n            I[Interfaces]\n        end\n        \n        subgraph \"Infrastructure\"\n            R[Repositories]\n            A[Adapters]\n            API[API Clients]\n        end\n        \n        subgraph \"Presentation\"\n            C[Components]\n            H[Hooks]\n            P[Pages]\n        end\n    end\n    \n    UC --> E\n    S --> VO\n    R --> I\n    C --> UC\n```\n\n### Diagrama de Flujo de Datos\n```mermaid\nsequenceDiagram\n    participant U as Usuario\n    participant C as Componente\n    participant S as Servicio\n    participant R as Repositorio\n    participant DB as Base de Datos\n    \n    U->>C: Acción del usuario\n    C->>S: Llamada al servicio\n    S->>R: Consulta datos\n    R->>DB: Query\n    DB-->>R: Resultado\n    R-->>S: Datos\n    S-->>C: Respuesta\n    C-->>U: UI actualizada\n```\n\n### Diagrama de Dependencias entre Módulos\n```mermaid\ngraph TD\n    Shared[Módulo Compartido]\n    Products[Módulo Productos]\n    Cart[Módulo Carrito]\n    Orders[Módulo Pedidos]\n    Customers[Módulo Clientes]\n    \n    Products --> Shared\n    Cart --> Shared\n    Cart --> Products\n    Orders --> Shared\n    Orders --> Products\n    Orders --> Cart\n    Orders --> Customers\n    Customers --> Shared\n```\n\n## 3. Tipos de Diagramas por Contexto\n\n### Para Entidades de Dominio\n```mermaid\nclassDiagram\n    class ProductEntity {\n        -id: ProductId\n        -name: string\n        -price: Money\n        -category: ProductCategory\n        +updatePrice(newPrice: Money)\n        +changeAvailability(available: boolean)\n    }\n    \n    class Money {\n        -value: number\n        -currency: string\n        +add(other: Money): Money\n        +multiply(factor: number): Money\n    }\n    \n    ProductEntity --> Money\n```\n\n### Para Servicios de Aplicación\n```mermaid\ngraph LR\n    subgraph \"Servicios de Aplicación\"\n        PS[ProductService]\n        CS[CartService]\n        OS[OrderService]\n    end\n    \n    subgraph \"Repositorios\"\n        PR[ProductRepository]\n        CR[CartRepository]\n        OR[OrderRepository]\n    end\n    \n    PS --> PR\n    CS --> CR\n    CS --> PR\n    OS --> OR\n    OS --> CR\n    OS --> PR\n```\n\n### Para APIs y Endpoints\n```mermaid\ngraph TB\n    Client[Cliente]\n    \n    subgraph \"API Routes\"\n        ProductsAPI[\"/api/products\"]\n        CartAPI[\"/api/cart\"]\n        OrdersAPI[\"/api/orders\"]\n    end\n    \n    subgraph \"Servicios\"\n        ProductService\n        CartService\n        OrderService\n    end\n    \n    Client --> ProductsAPI\n    Client --> CartAPI\n    Client --> OrdersAPI\n    \n    ProductsAPI --> ProductService\n    CartAPI --> CartService\n    OrdersAPI --> OrderService\n```\n\n## 4. Generación Automática de Diagramas\n\n### Análisis de Código\n**Extraer información de:**\n- Imports y exports de módulos\n- Definiciones de clases e interfaces\n- Relaciones entre entidades\n- Flujos de llamadas entre servicios\n- Estructura de carpetas y archivos\n\n### Detección de Patrones\n**Identificar:**\n- Patrón Repository implementado\n- Inyección de dependencias\n- Eventos de dominio\n- Casos de uso definidos\n- Adaptadores de infraestructura\n\n### Generación de Código Mermaid\n**Crear diagramas:**\n- Diagramas de clases para entidades\n- Diagramas de flujo para casos de uso\n- Diagramas de secuencia para APIs\n- Diagramas de componentes para UI\n\n## 5. Estructura de Archivos de Diagramas\n\n### Organización\n```\ndocs/\n├── architecture/\n│   ├── overview.md              # Diagrama general\n│   ├── modules/\n│   │   ├── productos.md         # Diagrama módulo productos\n│   │   ├── carrito.md          # Diagrama módulo carrito\n│   │   └── pedidos.md          # Diagrama módulo pedidos\n│   ├── flows/\n│   │   ├── checkout-flow.md     # Flujo de checkout\n│   │   └── product-search.md    # Flujo de búsqueda\n│   └── apis/\n│       ├── products-api.md      # Diagrama API productos\n│       └── cart-api.md         # Diagrama API carrito\n```\n\n### Formato de Archivo\n```markdown\n# Diagrama: [Título]\n\n## Descripción\n[Explicación del diagrama y su propósito]\n\n## Diagrama\n```mermaid\n[Código del diagrama]\n```\n\n## Componentes\n- **[Componente 1]**: [Descripción]\n- **[Componente 2]**: [Descripción]\n\n## Flujos Principales\n1. [Descripción del flujo 1]\n2. [Descripción del flujo 2]\n\n## Notas de Implementación\n- [Detalles técnicos importantes]\n- [Patrones utilizados]\n- [Consideraciones de diseño]\n\n## Última Actualización\n- **Fecha**: [fecha]\n- **Cambios**: [descripción de cambios]\n```\n\n## 6. Validaciones y Consistencia\n\n### Verificar Coherencia\n- Los diagramas reflejan el código actual\n- Las relaciones entre módulos son correctas\n- Los flujos de datos son precisos\n- La nomenclatura es consistente\n\n### Detectar Inconsistencias\n- Dependencias circulares\n- Módulos huérfanos\n- Interfaces no implementadas\n- Servicios no utilizados\n\n## 7. Integración con Documentación\n\n### Enlaces Automáticos\n- Conectar diagramas con documentación de componentes\n- Referenciar APIs desde diagramas de flujo\n- Vincular entidades con sus casos de uso\n\n### Índices Actualizados\n- Actualizar tabla de contenidos\n- Generar índice de diagramas\n- Crear enlaces cruzados\n\n## Instrucciones de Ejecución\n\n1. **Analizar** el archivo modificado y su contexto\n2. **Identificar** qué diagramas necesitan actualización\n3. **Extraer** información arquitectónica relevante\n4. **Generar** código Mermaid actualizado\n5. **Validar** coherencia con otros diagramas\n6. **Actualizar** archivos de documentación\n7. **Crear** enlaces y referencias cruzadas\n\n**Formato de Respuesta:**\n- 📊 **Diagramas actualizados**: [lista de diagramas modificados]\n- 🔄 **Cambios detectados**: [descripción de cambios arquitectónicos]\n- 🔗 **Relaciones nuevas**: [nuevas dependencias o conexiones]\n- ⚠️ **Inconsistencias**: [problemas detectados en la arquitectura]\n- 📝 **Archivos generados**: [archivos de documentación creados/actualizados]\n- 💡 **Sugerencias**: [mejoras arquitectónicas recomendadas]"
  }
}