{
  "enabled": true,
  "name": "Generador de Documentaci√≥n de APIs",
  "description": "Hook que genera autom√°ticamente documentaci√≥n de APIs y endpoints al modificar rutas de Next.js, incluyendo par√°metros, respuestas y ejemplos de uso",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/app/api/**/*.{ts,js}",
      "src/pages/api/**/*.{ts,js}",
      "src/modules/**/infrastructure/api/**/*.{ts,js}"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Genera documentaci√≥n autom√°tica para la API o endpoint modificado siguiendo los est√°ndares del proyecto Mandorla:\n\n## 1. An√°lisis del Endpoint\n\n**Extraer informaci√≥n:**\n- M√©todo HTTP (GET, POST, PUT, DELETE)\n- Ruta del endpoint\n- Par√°metros de ruta y query\n- Estructura del body (para POST/PUT)\n- Tipos de respuesta\n- C√≥digos de estado HTTP\n- Middleware utilizado\n- Validaciones implementadas\n\n**Identificar funcionalidad:**\n- Prop√≥sito del endpoint en el contexto del e-commerce\n- Relaci√≥n con entidades de dominio (Producto, Carrito, Cliente, Pedido)\n- Operaciones CRUD realizadas\n- Integraciones con servicios externos\n\n## 2. Estructura de Documentaci√≥n de API\n\n**Crear documentaci√≥n en espa√±ol:**\n\n```markdown\n# API: [Nombre del Endpoint]\n\n## Informaci√≥n General\n\n- **M√©todo**: [GET/POST/PUT/DELETE]\n- **Ruta**: `/api/[ruta]`\n- **Descripci√≥n**: [Prop√≥sito del endpoint]\n- **Autenticaci√≥n**: [Requerida/No requerida]\n- **Versi√≥n**: v1\n\n## Par√°metros\n\n### Par√°metros de Ruta\n| Par√°metro | Tipo | Descripci√≥n | Ejemplo |\n|-----------|------|-------------|----------|\n| id | string | ID del recurso | \"123\" |\n\n### Par√°metros de Query\n| Par√°metro | Tipo | Requerido | Default | Descripci√≥n |\n|-----------|------|-----------|---------|-------------|\n| page | number | ‚ùå | 1 | N√∫mero de p√°gina |\n| limit | number | ‚ùå | 10 | Elementos por p√°gina |\n\n### Body (POST/PUT)\n```json\n{\n  \"campo1\": \"valor\",\n  \"campo2\": 123,\n  \"campo3\": true\n}\n```\n\n## Respuestas\n\n### Respuesta Exitosa (200/201)\n```json\n{\n  \"success\": true,\n  \"data\": {\n    // Estructura de datos\n  },\n  \"message\": \"Operaci√≥n completada exitosamente\"\n}\n```\n\n### Respuestas de Error\n\n#### 400 - Bad Request\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Datos de entrada inv√°lidos\",\n    \"details\": {\n      \"field\": \"Descripci√≥n del error\"\n    }\n  }\n}\n```\n\n#### 404 - Not Found\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"RESOURCE_NOT_FOUND\",\n    \"message\": \"Recurso no encontrado\"\n  }\n}\n```\n\n#### 500 - Internal Server Error\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"INTERNAL_ERROR\",\n    \"message\": \"Error interno del servidor\"\n  }\n}\n```\n\n## Ejemplos de Uso\n\n### Ejemplo con cURL\n```bash\n# GET\ncurl -X GET \"http://localhost:3000/api/[ruta]?param=valor\" \\\n  -H \"Content-Type: application/json\"\n\n# POST\ncurl -X POST \"http://localhost:3000/api/[ruta]\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"campo\": \"valor\"\n  }'\n```\n\n### Ejemplo con JavaScript/TypeScript\n```typescript\n// Usando fetch\nconst response = await fetch('/api/[ruta]', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    campo: 'valor'\n  })\n})\n\nconst data = await response.json()\n\nif (data.success) {\n  console.log('√âxito:', data.data)\n} else {\n  console.error('Error:', data.error)\n}\n```\n\n### Ejemplo con React Hook\n```typescript\n// Hook personalizado para usar la API\nfunction useApiEndpoint() {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  \n  const llamarApi = async (datos: TipoDatos) => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      const response = await fetch('/api/[ruta]', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(datos)\n      })\n      \n      const result = await response.json()\n      \n      if (!result.success) {\n        throw new Error(result.error.message)\n      }\n      \n      return result.data\n    } catch (err) {\n      setError(err.message)\n      throw err\n    } finally {\n      setLoading(false)\n    }\n  }\n  \n  return { llamarApi, loading, error }\n}\n```\n\n## Validaciones\n\n### Esquemas Zod (si aplica)\n```typescript\nconst esquemaEntrada = z.object({\n  campo1: z.string().min(1, 'Campo requerido'),\n  campo2: z.number().positive('Debe ser positivo'),\n  campo3: z.boolean().optional()\n})\n\ntype TipoEntrada = z.infer<typeof esquemaEntrada>\n```\n\n### Reglas de Negocio\n- [Lista de validaciones espec√≠ficas del dominio]\n- [Restricciones de datos]\n- [Reglas de autorizaci√≥n]\n\n## Integraci√≥n con M√≥dulos\n\n### Servicios Utilizados\n- [Lista de servicios de dominio utilizados]\n- [Repositorios accedidos]\n- [APIs externas consultadas]\n\n### Entidades Afectadas\n- [Entidades de dominio modificadas]\n- [Relaciones actualizadas]\n\n## Consideraciones de Rendimiento\n\n- **Cach√©**: [Estrategia de cach√© implementada]\n- **Paginaci√≥n**: [Implementaci√≥n de paginaci√≥n]\n- **L√≠mites**: [L√≠mites de rate limiting]\n- **Optimizaciones**: [Optimizaciones espec√≠ficas]\n\n## Testing\n\n### Tests Unitarios\n```typescript\n// Ejemplo de test para el endpoint\ndescribe('/api/[ruta]', () => {\n  it('deber√≠a retornar datos v√°lidos', async () => {\n    const response = await request(app)\n      .post('/api/[ruta]')\n      .send({ campo: 'valor' })\n      .expect(200)\n    \n    expect(response.body.success).toBe(true)\n    expect(response.body.data).toBeDefined()\n  })\n})\n```\n\n### Tests de Integraci√≥n\n- [Casos de prueba de integraci√≥n]\n- [Mocks necesarios]\n- [Datos de prueba]\n\n## Changelog\n- [Fecha]: [Cambios realizados]\n```\n\n## 3. Casos Espec√≠ficos por Tipo de API\n\n**APIs de Productos:**\n- Documentar filtros de b√∫squeda\n- Incluir ejemplos con categor√≠as\n- Mostrar paginaci√≥n y ordenamiento\n- Documentar manejo de inventario\n\n**APIs de Carrito:**\n- Documentar operaciones CRUD del carrito\n- Incluir c√°lculos de precios\n- Mostrar manejo de sesiones\n- Documentar validaciones de stock\n\n**APIs de Pedidos:**\n- Documentar flujo completo de checkout\n- Incluir integraci√≥n con pagos\n- Mostrar estados de pedido\n- Documentar notificaciones por email\n\n**APIs de Clientes:**\n- Documentar autenticaci√≥n\n- Incluir validaci√≥n de datos\n- Mostrar manejo de direcciones\n- Documentar preferencias de usuario\n\n## 4. Generaci√≥n Autom√°tica\n\n**Crear archivos:**\n- `[endpoint].api.md` en carpeta docs/api/\n- Actualizar √≠ndice de APIs\n- Generar colecci√≥n de Postman (si aplica)\n- Crear ejemplos de integraci√≥n\n\n**Metadatos:**\n```yaml\n---\ntitle: [Nombre del Endpoint]\nmethod: [GET/POST/PUT/DELETE]\npath: /api/[ruta]\ncategory: [productos/carrito/pedidos/clientes]\ntags: [tag1, tag2]\nlastUpdated: [fecha]\nversion: v1\nstatus: [stable/beta/deprecated]\n---\n```\n\n## Instrucciones de Ejecuci√≥n\n\n1. **Analizar** el archivo de API modificado\n2. **Extraer** informaci√≥n de rutas, m√©todos y tipos\n3. **Generar** documentaci√≥n completa\n4. **Crear ejemplos** funcionales\n5. **Validar** completitud de la documentaci√≥n\n6. **Guardar** en estructura de documentaci√≥n\n\n**Formato de Respuesta:**\n- üìã **API documentada**: [ruta del endpoint]\n- üîß **M√©todo**: [HTTP method]\n- üìù **Par√°metros**: [n√∫mero de par√°metros documentados]\n- üìä **Respuestas**: [c√≥digos de estado documentados]\n- üß™ **Ejemplos**: [n√∫mero de ejemplos creados]\n- ‚ö†Ô∏è **Advertencias**: [informaci√≥n faltante]\n- üí° **Sugerencias**: [mejoras recomendadas]"
  }
}